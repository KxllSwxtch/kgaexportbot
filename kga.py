import time
import pickle
import telebot
import os
import re
import requests
import locale
import datetime
import logging
from telebot import types
from dotenv import load_dotenv
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from urllib.parse import urlparse, parse_qs
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import NoAlertPresentException

CAPSOLVER_API_KEY = os.getenv("CAPSOLVER_API_KEY")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á CapSolver
CHROMEDRIVER_PATH = "/app/.chrome-for-testing/chromedriver-linux64/chromedriver"
# CHROMEDRIVER_PATH = "/usd/local/bin/chromedriver"
COOKIES_FILE = "cookies.pkl"
CHANNEL_USERNAME = "@kga_korea"

session = requests.Session()

# Configure logging
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# Load keys from .env file
load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)

# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
car_id_external = ""
usd_rate = None


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
def check_subscription(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in [
            "member",
            "administrator",
            "creator",
        ]:  # –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            return True
        else:
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ!"
def get_ready_button():
    markup = types.InlineKeyboardMarkup()
    ready_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ!", callback_data="ready")
    markup.add(ready_button)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
def set_bot_commands():
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("cbr", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
    ]
    bot.set_my_commands(commands)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API
def get_currency_rates():
    global usd_rate

    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    response = requests.get(url)
    data = response.json()

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    eur_rate = data["Valute"]["EUR"]["Value"]
    usd_rate = data["Valute"]["USD"]["Value"]
    krw_rate = data["Valute"]["KRW"]["Value"] / data["Valute"]["KRW"]["Nominal"]
    cny_rate = data["Valute"]["CNY"]["Value"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    rates_text = (
        f"–ö—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë:\n\n"
        f"EUR {eur_rate:.4f} ‚ÇΩ\n"
        f"USD {usd_rate:.4f} ‚ÇΩ\n"
        f"KRW {krw_rate:.4f} ‚ÇΩ\n"
        f"CNY {cny_rate:.4f} ‚ÇΩ"
    )

    return rates_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr
@bot.message_handler(commands=["cbr"])
def cbr_command(message):
    try:
        rates_text = get_currency_rates()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="calculate_another"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, rates_text, reply_markup=keyboard)
    except Exception as e:
        bot.send_message(
            message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(
        types.KeyboardButton("–†–∞—Å—á—ë—Ç"),
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏"),
        types.KeyboardButton("Telegram-–∫–∞–Ω–∞–ª"),
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ WhatsApp"),
        types.KeyboardButton("–ù–∞—à Instagram"),
    )
    return keyboard


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    if check_subscription(user_id):
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n"
            "–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ KGA KOREA, —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞. üöóüí∞\n\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        )
        bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu())
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n"
            "–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ KGA KOREA, —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞. üöóüí∞\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @kga_korea.\n"
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        bot.send_message(
            message.chat.id, welcome_message, reply_markup=get_ready_button()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ!"
@bot.callback_query_handler(func=lambda call: call.data == "ready")
def handle_ready_button(call):
    user_id = call.from_user.id

    if check_subscription(user_id):
        bot.answer_callback_query(
            call.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        bot.send_message(
            call.message.chat.id,
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_menu(),
        )
    else:
        bot.answer_callback_query(
            call.id, text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        bot.send_message(
            call.message.chat.id,
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @kga_korea.",
        )


# Error handling function
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text)
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


# def solve_recaptcha_v3():
#     payload = {
#         "clientKey": CAPSOLVER_API_KEY,
#         "task": {
#             "type": "ReCaptchaV3TaskProxyLess",
#             "websiteKey": SITE_KEY,
#             "websiteURL": "http://www.encar.com:80",
#             "pageAction": "/dc/dc_cardetailview_do",
#         },
#     }
#     res = requests.post("https://api.capsolver.com/createTask", json=payload)
#     resp = res.json()
#     task_id = resp.get("taskId")
#     if not task_id:
#         print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:", res.text)
#         return None
#     print(f"–ü–æ–ª—É—á–µ–Ω taskId: {task_id} / –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

#     while True:
#         time.sleep(1)
#         payload = {"clientKey": CAPSOLVER_API_KEY, "taskId": task_id}
#         res = requests.post("https://api.capsolver.com/getTaskResult", json=payload)
#         resp = res.json()
#         if resp.get("status") == "ready":
#             print("reCAPTCHA —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–∞")
#             return resp.get("solution", {}).get("gRecaptchaResponse")
#         if resp.get("status") == "failed" or resp.get("errorId"):
#             print("–†–µ—à–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å! –û—Ç–≤–µ—Ç:", res.text)
#             return None


def save_cookies(driver):
    with open(COOKIES_FILE, "wb") as file:
        pickle.dump(driver.get_cookies(), file)


# Load cookies from file
def load_cookies(driver):
    if os.path.exists(COOKIES_FILE):
        with open(COOKIES_FILE, "rb") as file:
            cookies = pickle.load(file)
            for cookie in cookies:
                driver.add_cookie(cookie)


def check_and_handle_alert(driver, retries=3, wait_time=3):
    for _ in range(retries):
        try:
            # –ñ–¥—ë–º alert –¥–æ 5 —Å–µ–∫—É–Ω–¥
            WebDriverWait(driver, wait_time).until(EC.alert_is_present())
            alert = driver.switch_to.alert
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ: {alert.text}")
            alert.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç alert
            print("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        except TimeoutException:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.")
            break
        except Exception as alert_exception:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ alert: {alert_exception}")
            break


def get_car_info(url):
    global car_id_external

    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
    )

    service = Service(CHROMEDRIVER_PATH)
    driver = webdriver.Chrome(service=service, options=chrome_options)

    try:
        driver.get(url)
        check_and_handle_alert(driver, retries=5)
        load_cookies(driver)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ reCAPTCHA
        if "reCAPTCHA" in driver.page_source:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ reCAPTCHA. –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å...")
            driver.refresh()
            logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ reCAPTCHA.")
            check_and_handle_alert(driver)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

        save_cookies(driver)
        logging.info("–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

        # –ü–∞—Ä—Å–∏–Ω–≥ URL –¥–ª—è car_id
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]
        car_id_external = car_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ areaLeaseRent
        try:
            lease_area = driver.find_element(By.ID, "areaLeaseRent")
            title_element = lease_area.find_element(By.CLASS_NAME, "title")

            if "Î¶¨Ïä§Ï†ïÎ≥¥" in title_element.text or "Î†åÌä∏Ï†ïÎ≥¥" in title_element.text:
                return [
                    "",
                    "–î–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏–∑–∏–Ω–≥–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                ]
        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç areaLeaseRent –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        car_title, car_date, car_engine_capacity, car_price = "", "", "", ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ product_left
        try:
            product_left = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CLASS_NAME, "product_left"))
            )
            product_left_splitted = product_left.text.split("\n")
            prod_name = product_left.find_element(By.CLASS_NAME, "prod_name")

            car_title = prod_name.text.strip()
            car_date = product_left_splitted[3]
            car_engine_capacity = product_left_splitted[6]
            car_price = re.sub(r"\D", "", product_left_splitted[1])

        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç product_left –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ gallery_photo.")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                gallery_element = WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, "div.gallery_photo")
                    )
                )
                prod_name = gallery_element.find_element(By.CLASS_NAME, "prod_name")
                car_title = prod_name.text
                items = gallery_element.find_elements(By.XPATH, ".//*")
                for index, item in enumerate(items):
                    if index == 10:
                        car_date = item.text
                    if index == 18:
                        car_engine_capacity = item.text
                try:
                    keyinfo_element = driver.find_element(
                        By.CSS_SELECTOR, "div.wrap_keyinfo"
                    )
                    keyinfo_items = keyinfo_element.find_elements(By.XPATH, ".//*")
                    keyinfo_texts = [
                        item.text for item in keyinfo_items if item.text.strip() != ""
                    ]
                    for index, info in enumerate(keyinfo_texts):
                        if index == 12:
                            car_price = re.sub(r"\D", "", info)
                except NoSuchElementException:
                    print("–≠–ª–µ–º–µ–Ω—Ç wrap_keyinfo –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except NoSuchElementException:
                print("–≠–ª–µ–º–µ–Ω—Ç gallery_photo —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        formatted_price = car_price.replace(",", "") if car_price else "0"
        formatted_engine_capacity = (
            car_engine_capacity.replace(",", "")[0:-2] if car_engine_capacity else "0"
        )
        cleaned_date = "".join(filter(str.isdigit, car_date)) if car_date else "000000"
        formatted_date = f"01{cleaned_date[2:4]}{cleaned_date[:2]}"

        new_url = f"https://plugin-back-versusm.amvera.io/car-ab-korea/{car_id}?price={formatted_price}&date={formatted_date}&volume={formatted_engine_capacity}"
        return [new_url, car_title]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None, None

    finally:
        driver.quit()


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data

    print("\n\n#################")
    print("–ù–û–í–´–ô –ó–ê–ü–†–û–°")
    print("#################\n\n")

    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚è≥")

    # Check if the link is from the mobile version
    if "fem.encar.com" in link:
        # Extract all digits from the mobile link
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            # Create the new URL
            link = f"https://www.encar.com/dc/dc_cardetailview.do?carid={car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return

    # Get car info and new URL
    result = get_car_info(link)
    time.sleep(5)

    if result is None:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        return

    new_url, car_title = result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∑–∏–Ω–≥–µ
    if not new_url and car_title:
        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/alekseyan85"
            ),
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            ),
        )
        bot.send_message(
            message.chat.id,
            car_title,  # —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –º–∞—à–∏–Ω–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–∞—è
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    if new_url:
        response = requests.get(new_url)

        if response.status_code == 200:
            json_response = response.json()
            car_data = json_response

            # Extract year from the car date string
            year = json_response.get("result")["car"]["date"].split()[-1]
            engine_volume = json_response.get("result")["car"]["engineVolume"]
            price = json_response.get("result")["price"]["car"]["krw"]

            if year and engine_volume and price:
                engine_volume_formatted = f"{format_number(int(engine_volume))} cc"
                age_formatted = calculate_age(year)

                details = {
                    "car_price_korea": json_response.get("result")["price"]["car"][
                        "rub"
                    ],
                    "customs_fee": json_response.get("result")["price"]["russian"][
                        "duty"
                    ]["rub"],
                    "registration": json_response.get("result")["price"]["russian"][
                        "registration"
                    ]["rub"],
                    "sbkts": json_response.get("result")["price"]["russian"]["sbkts"][
                        "rub"
                    ],
                    "svhAndExpertise": json_response.get("result")["price"]["russian"][
                        "svhAndExpertise"
                    ]["rub"],
                }

                # Car's price in KRW
                price_formatted = format_number(price)

                # Price in USD
                total_cost_usd = (
                    details["car_price_korea"] / (usd_rate)
                    + 600
                    + 600
                    + details["customs_fee"] / (usd_rate)
                    + 25000 / usd_rate
                    + details["svhAndExpertise"] / (usd_rate)
                    + details["sbkts"] / (usd_rate)
                )

                # Price in RUB
                total_cost_rub = total_cost_usd * usd_rate

                result_message = (
                    f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_formatted} KRW\n"
                    f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: \n**{format_number(total_cost_rub)}‚ÇΩ / {format_number(total_cost_usd)}$**\n\n"
                    f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({link})\n\n"
                    "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @alekseyan85\n\n"
                    "üîó[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª](https://t.me/kga_korea)\n"
                )

                bot.send_message(message.chat.id, result_message, parse_mode="Markdown")

                # Inline buttons for further actions
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                        callback_data="technical_report",
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/alekseyan85"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        callback_data="calculate_another",
                    ),
                )

                bot.send_message(
                    message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
                )
        else:
            send_error_message(
                message,
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )


# Function to get insurance total
def get_insurance_total():
    print("\n\n####################")
    print("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")
    print("####################\n\n")

    global car_id_external

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver —Å –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    )

    service = Service(CHROMEDRIVER_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
    url = f"http://www.encar.com/dc/dc_cardetailview.do?method=kidiFirstPop&carid={car_id_external}&wtClick_carview=044"

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebDriver
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(url)

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç 'smlist' –±–µ–∑ —è–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
        time.sleep(2)
        try:
            smlist_element = driver.find_element(By.CLASS_NAME, "smlist")
        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç 'smlist' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        table = smlist_element.find_element(By.TAG_NAME, "table")
        rows = table.find_elements(By.TAG_NAME, "tr")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = (
            rows[4].find_elements(By.TAG_NAME, "td")[1].text if len(rows) > 4 else "0"
        )
        damage_to_other_car = (
            rows[5].find_elements(By.TAG_NAME, "td")[1].text if len(rows) > 5 else "0"
        )

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        def extract_large_number(damage_text):
            if "ÏóÜÏùå" in damage_text:
                return "0"
            numbers = re.findall(r"[\d,]+(?=\s*Ïõê)", damage_text)
            return numbers[0] if numbers else "0"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car_formatted = extract_large_number(damage_to_my_car)
        damage_to_other_car_formatted = extract_large_number(damage_to_other_car)

        return [damage_to_my_car_formatted, damage_to_other_car_formatted]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ""]

    finally:
        driver.quit()


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, usd_rate

    if call.data.startswith("detail"):
        print("\n\n####################")
        print("[–ó–ê–ü–†–û–°] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")
        print("####################\n\n")

        details = {
            "car_price_korea": car_data.get("result")["price"]["car"]["rub"],
            "customs_fee": car_data.get("result")["price"]["russian"]["duty"]["rub"],
            "registration": car_data.get("result")["price"]["russian"]["registration"][
                "rub"
            ],
            "sbkts": car_data.get("result")["price"]["russian"]["sbkts"]["rub"],
            "svhAndExpertise": car_data.get("result")["price"]["russian"][
                "svhAndExpertise"
            ]["rub"],
        }

        # Formatted numbers
        car_price_formatted = format_number(details["car_price_korea"] / (usd_rate))
        kga_export_service_fee_formatted = format_number(600)
        delivery_fee_formatted = format_number(600)
        customs_fee_formatted = format_number(details["customs_fee"] / (usd_rate))
        registration_fee_formatted = format_number(25000 / usd_rate)
        sbkts_formatted = format_number(details["svhAndExpertise"] / (usd_rate))
        svh_formatted = format_number(details["sbkts"] / (usd_rate))

        # Construct cost breakdown message
        detail_message = (
            "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: <b>{car_price_formatted}$</b>\n\n"
            f"–£—Å–ª—É–≥–∏ KGA Korea: <b>{kga_export_service_fee_formatted}$</b>\n\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: <b>{delivery_fee_formatted}$</b>\n\n"
            f"–†–∞—Å—Ç–∞–º–æ–∂–∫–∞: <b>{customs_fee_formatted}$</b>\n\n"
            f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ / –ë—Ä–æ–∫–µ—Ä: <b>{registration_fee_formatted}$</b>\n\n"
            f"–°–ë–ö–¢–° / –≠–ü–¢–°: <b>{sbkts_formatted}$</b>\n\n"
            f"–°–í–• / –í—ã–≥—Ä—É–∑–∫–∞: <b>{svh_formatted}$</b>\n\n\n"
            f"<b>–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: </b> –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ <b style='text-transform: uppercase;'>–¥–µ–Ω—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>. –¢–∞–∫ –∫–∞–∫ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞ –∫–æ—Ä–µ–π—Å–∫–æ–π –≤–æ–Ω—ã –∏ –¥–æ–ª–ª–∞—Ä–∞, –∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –≤ –†–§ - –æ—Ç –∫—É—Ä—Å–∞ –µ–≤—Ä–æ.\n\n–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!\n\n"
        )

        bot.send_message(call.message.chat.id, detail_message, parse_mode="HTML")

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/alekseyan85"
            )
        )

        bot.send_message(
            call.message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard
        )

    elif call.data == "technical_report":
        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if "–û—à–∏–±–∫–∞" in insurance_info[0] or "–û—à–∏–±–∫–∞" in insurance_info[1]:
            error_message = (
                "–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. \n\n"
                f'<a href="https://fem.encar.com/cars/detail/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/alekseyan85"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/alekseyan85"
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    if user_message == "–†–∞—Å—á—ë—Ç":
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    elif re.match(r"^https?://(www|fem)\.encar\.com/.*", user_message):
        calculate_cost(user_message, message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        bot.send_message(
            message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —Å—Å—ã–ª–∫–µ: @alekseyan85"
        )

    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ WhatsApp":
        whatsapp_link = "https://wa.me/821049911282"
        bot.send_message(
            message.chat.id,
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp –ø–æ —Å—Å—ã–ª–∫–µ: {whatsapp_link}",
        )

    elif user_message == "–û –∫–æ–º–ø–∞–Ω–∏–∏":
        about_message = "KGA KOREA ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –¥—Ä—É–≥ –≤ –º–∏—Ä–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤! –ù–∞—à–µ –æ–±–µ—â–∞–Ω–∏–µ: –Ω–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∏ —á–µ—Å—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É!"
        bot.send_message(message.chat.id, about_message)

    elif user_message == "Telegram-–∫–∞–Ω–∞–ª":
        channel_link = "https://t.me/kga_korea"
        bot.send_message(
            message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {channel_link}"
        )
    elif user_message == "–ù–∞—à Instagram":
        instagram_link = "https://www.instagram.com/kgakorea/"
        bot.send_message(message.chat.id, f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Instagram: {instagram_link}")

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ —É—Å–ª–æ–≤–∏–π
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com –∏–ª–∏ fem.encar.com.",
        )


# Utility function to calculate the age category
def calculate_age(year):
    current_year = datetime.datetime.now().year
    age = current_year - int(year)

    if age < 3:
        return f"–î–æ 3 –ª–µ—Ç"
    elif 3 <= age < 5:
        return f"–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    else:
        return f"–æ—Ç 5 –ª–µ—Ç"


def format_number(number):
    number = float(number) if isinstance(number, str) else number
    return locale.format_string("%d", number, grouping=True)


# Run the bot
if __name__ == "__main__":
    get_currency_rates()
    set_bot_commands()
    bot.polling(none_stop=True)


# UNUSED CODE
# recaptcha_response = solve_recaptcha_v3()

# if recaptcha_response:
#     # –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç g-recaptcha-response —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
#     try:
#         wait = WebDriverWait(driver, 1)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ 10 —Å–µ–∫—É–Ω–¥
#         recaptcha_element = wait.until(
#             EC.presence_of_element_located((By.ID, "g-recaptcha-response"))
#         )

#         # –ó–∞–ø–æ–ª–Ω—è–µ–º g-recaptcha-response
#         driver.execute_script(
#             f'document.getElementById("g-recaptcha-response").innerHTML = "{recaptcha_response}";'
#         )

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
#         driver.execute_script("document.forms[0].submit();")
#         time.sleep(1)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è

#         check_and_handle_alert(driver)

#         # –û–±–Ω–æ–≤–∏—Ç–µ URL –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
#         driver.get(url)

#         check_and_handle_alert(driver)
#     except TimeoutException:
#         print(
#             "–≠–ª–µ–º–µ–Ω—Ç g-recaptcha-response –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥."
#         )
